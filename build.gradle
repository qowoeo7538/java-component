buildscript {
    repositories {
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("io.spring.gradle:propdeps-plugin:0.0.8")
    }
}

plugins {
    id "com.gradle.build-scan" version "1.11"
    id "io.spring.dependency-management" version "1.0.5.RELEASE" apply false
}

// 审视扫描
buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'
}

ext {
    moduleProjects = subprojects.findAll {
        !it.name.equals('component-build-script')
    }
    localRepository = 'D:\\m2\\repository'
}

// 所有项目配置
configure(allprojects) { project ->

    apply plugin: "propdeps"
    apply plugin: "java"

    group = "org.shaw"
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
        mavenLocal()
    }
}

// 模块项目
configure(moduleProjects) { subproject ->

    apply plugin: "pmd"
    apply plugin: "findbugs"
    apply plugin: 'maven'
    apply plugin: 'jdepend'
    apply plugin: "io.spring.dependency-management"

    // 定义本地maven仓库的地址, 执行:gradle clean uploadArchives 发布到本地仓库
    uploadArchives.repositories.mavenDeployer {
        repository(url: uri(localRepository))
        // 组名
        pom.groupId = 'org.shaw'
        // 版本号
        pom.version = '1.0-SNAPSHOT'
    }

    // 属性配置
    ext {
        artifactId = uploadArchives.repositories.mavenDeployer.pom.artifactId

        junitVersion = "4.12"
        mockitoVersion = "2.12.0"
        hamcrestVersion = "1.3"
        springVersion = "5.0.1.RELEASE"
        javassistVersion = "3.22.0-GA"
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework:spring-framework-bom:${springVersion}"
        }
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
        }
        applyMavenExclusions = false
    }

    [compileJava, compileTestJava].each() {
        it.options.encoding = 'UTF-8'
        it.sourceCompatibility = 1.8
        it.targetCompatibility = 1.8
    }

    compileTestJava {
        options.compilerArgs += "-parameters"
    }

    dependencies {
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.mockito:mockito-core:${mockitoVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")
    }

    project.pmd {
        ignoreFailures = false
        ruleSets = [
                'java-basic',
                'java-braces',
                'java-clone',
                'java-codesize',
                'java-comments',
                'java-controversial',
                'java-coupling',
                'java-design',
                'java-empty',
                'java-finalizers',
                'java-imports',
                'java-j2ee',
                'java-javabeans',
                'java-junit',
                'java-logging-jakarta-commons',
                'java-logging-java',
                'java-migrating',
                'java-naming',
                'java-optimizations',
                'java-strictexception',
                'java-strings',
                'java-sunsecure',
                'java-typeresolution',
                'java-unnecessary',
                'java-unusedcode'
        ]
        reportsDir = file("${project.rootDir}/buildScript/reports")
    }

    task pmd (type: Pmd) {
        source = fileTree(dir: "src/main", include: "**/*.java")
        ignoreFailures = true
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    project.findbugs {
        ignoreFailures = false
        excludeFilter = new File("${project.rootDir}/buildScript/findbugs-filter.xml")
        reportsDir = file("${project.rootDir}/buildScript/reports")
        effort = "max"
    }

    findbugsMain{
        it.source = fileTree(dir: "src/main", include: "**/*.java")
        it.reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    findbugsTest {
        it.source = fileTree(dir: "src/test", include: "**/*.java")
        it.reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

configure(rootProject) {
    description = "Java Component"

    configurations.archives.artifacts.clear()
}